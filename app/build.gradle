 plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    namespace 'com.example.sample1'
    compileSdk 34

    defaultConfig {
        applicationId "com.example.sample1"
        minSdk 24
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
    }
    flavorDimensions "version"

    productFlavors {
        production {
//            resValue "string", "app_name_lite", "Dynamic Times Prime Lite"
            resValue "string", "app_name", "Times Prime"
            resValue "string", "staleness_days", "7"

        }
        dynamic {
//            resValue "string", "app_name", "Dynamic Times Prime"
            resValue "string", "app_name_lite", "Dynamic Times Prime Lite"
            resValue "string", "staleness_days", "0"
        }


        all { flavor ->
            task("${flavor.name}GoogleServices", type: Copy) {
                description = 'Switches to  depending on flavor'
                from "src/${flavor.name}"
                include "ApiEndPoints.kt"
                into "."
            }
        }
    }


    // Encapsulates your external native build configurations.
    externalNativeBuild {

        // Encapsulates your CMake build configurations.
        cmake {

            // Provides a relative path to your CMake build script.
//            path "CMakeLists.txt"
            path = file("src/main/cpp/CMakeLists.txt")
        }
    }

//    ndkVersion '26.2.11394342'   if working fine without it the  comment this line


}

dependencies {

    implementation 'androidx.core:core-ktx:1.9.0'
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'com.google.android.material:material:1.12.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.7.7'
    implementation 'androidx.navigation:navigation-ui-ktx:2.7.7'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}


 afterEvaluate {
     android.productFlavors.all {
         flavor ->
//             tasks."generate${flavor.name.capitalize()}DebugResources".dependsOn "${flavor.name}GoogleServices"
             tasks."generate${flavor.name.capitalize()}ReleaseResources".dependsOn "${flavor.name}GoogleServices"
     }
 }




//
// afterEvaluate {
//     android.applicationVariants.all { variant ->
//         def flavorName = variant.flavorName.capitalize()
//         def buildType = variant.buildType.name.capitalize()
//         def variantName = variant.name.capitalize()
//
//         // Task for the specific flavor
//         tasks "customTask${flavorName}${buildType}" {
//             group = "custom"
//             description = "Runs a custom task for ${flavorName} and ${buildType}"
//
//             doLast {
//                 println "Running custom task for ${flavorName}${buildType}"
//             }
//         }
//
//         // Make the task dependent on assemble
//         tasks["assemble${variantName}"].dependsOn "customTask${flavorName}${buildType}"
//
//         println "Running custom task variantName ${variantName}"
//         println "Running custom task flavorName ${flavorName}"
//         println "Running custom task buildType ${buildType}"
//     }
// }
//
// android.buildTypes.all{ theBuildType ->
//     tasks ("${theBuildType.name}MyCustomTask")<<{
//         //use debuggable flag
//         println "!!!!! theBuildType.name  ${theBuildType.name}"
////         println theBuildType.debuggable
//     }
// }



